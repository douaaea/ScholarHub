trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  name: Default
  demands:
    - agent.name -equals DESKTOP-CIJ61FT

variables:
  backendDir: 'backend'
  frontendDir: 'frontendWeb'
  androidDir: 'frontendMobile'

stages:

# --- BACKEND (Spring Boot dans /demo) ---
- stage: Build_Backend
  displayName: 'Build & Test Spring Boot'
  jobs:
    - job: backend
      displayName: 'Backend Java 21 + Maven'
      steps:
        - task: JavaToolInstaller@0
          inputs:
            versionSpec: '21'
            jdkArchitecture: 'x64'
            jdkSourceOption: 'PreInstalled'
            jdkArchitectureOption: 'x64'

        - script: |
            cd $(backendDir)/demo
            chmod +x mvnw
            ./mvnw clean install
          displayName: 'Build backend with Maven'

        - script: |
            cd $(backendDir)/demo
            chmod +x mvnw
            ./mvnw test
          displayName: 'Run backend unit tests'

# --- FRONTEND WEB (React + Next.js) ---
- stage: Build_Frontend
  displayName: 'Build & Test Frontend Web'
  jobs:
    - job: frontend
      displayName: 'Frontend React'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'

        - script: |
            cd $(frontendDir)
            npm install
            npm run lint
            npm run build
            npm run test -- --watchAll=false
          displayName: 'React: install, lint, build, test'

# --- ANDROID MOBILE (Java) ---
- stage: Build_Android
  displayName: 'Build Android APK'
  jobs:
    - job: android
      displayName: 'Android Build'
      steps:
        - task: JavaToolInstaller@0
          inputs:
            versionSpec: '17'
            jdkArchitecture: 'x64'
            jdkSourceOption: 'PreInstalled'
            jdkArchitectureOption: 'x64'

        - script: |
            echo "Accepting Android SDK licenses..."
            yes | sdkmanager --licenses || true
          displayName: 'Accept Android SDK licenses'

        - script: |
            cd $(androidDir)
            chmod +x ./gradlew
            ./gradlew assembleDebug
          displayName: 'Build Android APK (Debug)'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(androidDir)/app/build/outputs/apk/debug'
            ArtifactName: 'AndroidAPK'
            publishLocation: 'Container'
          displayName: 'Publish Android APK'

# --- DEPLOYMENT (Docker Compose local) ---
- stage: Deploy_Local
  displayName: ' Déploiement local avec Docker Compose'
  dependsOn:
    - Build_Backend
    - Build_Frontend
  condition: succeeded()
  jobs:
    - job: deploy
      displayName: 'Déploiement sur Docker Desktop'
      steps:
        - script: |
            echo " Arrêt des anciens conteneurs..."
            docker compose down || true
          displayName: 'Arrêter les conteneurs existants'

        - script: |
            echo "Reconstruction et démarrage"
            docker compose up --build -d
          displayName: 'Lancer docker-compose'
